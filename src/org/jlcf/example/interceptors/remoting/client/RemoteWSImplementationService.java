package org.jlcf.example.interceptors.remoting.client;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.6 in JDK 6 Generated
 * source version: 2.1
 * 
 */
@WebServiceClient(name = "RemoteWSImplementationService", targetNamespace = "http://remoting.interceptors.example.jlcf.org/", wsdlLocation = "http://localhost:8091/ws/RemoteWS?wsdl")
public class RemoteWSImplementationService extends Service {

	private final static URL REMOTEWSIMPLEMENTATIONSERVICE_WSDL_LOCATION;
	private final static Logger logger = Logger
			.getLogger(org.jlcf.example.interceptors.remoting.client.RemoteWSImplementationService.class
					.getName());

	static {
		URL url = null;
		try {
			URL baseUrl;
			baseUrl = org.jlcf.example.interceptors.remoting.client.RemoteWSImplementationService.class
					.getResource(".");
			url = new URL(baseUrl, "http://localhost:8091/ws/RemoteWS?wsdl");
		} catch (MalformedURLException e) {
			logger.warning("Failed to create URL for the wsdl Location: 'http://localhost:8091/ws/RemoteWS?wsdl', retrying as a local file");
			logger.warning(e.getMessage());
		}
		REMOTEWSIMPLEMENTATIONSERVICE_WSDL_LOCATION = url;
	}

	public RemoteWSImplementationService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public RemoteWSImplementationService() {
		super(REMOTEWSIMPLEMENTATIONSERVICE_WSDL_LOCATION, new QName(
				"http://remoting.interceptors.example.jlcf.org/",
				"RemoteWSImplementationService"));
	}

	/**
	 * 
	 * @return returns RemoteWSInterface
	 */
	@WebEndpoint(name = "RemoteWSImplementationPort")
	public RemoteWSInterface getRemoteWSImplementationPort() {
		return super.getPort(new QName(
				"http://remoting.interceptors.example.jlcf.org/",
				"RemoteWSImplementationPort"), RemoteWSInterface.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns RemoteWSInterface
	 */
	@WebEndpoint(name = "RemoteWSImplementationPort")
	public RemoteWSInterface getRemoteWSImplementationPort(
			WebServiceFeature... features) {
		return super.getPort(new QName(
				"http://remoting.interceptors.example.jlcf.org/",
				"RemoteWSImplementationPort"), RemoteWSInterface.class,
				features);
	}

}
